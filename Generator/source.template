%%LICENSE%%

%%GENERATOR%%

#include <GL/OpenGL.h>

namespace %%SHORTNAME%% {
#ifdef _WIN32
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN 1
#endif
#include <Windows.h>

static HMODULE libGL;

typedef void* (GL_APIENTRYP PFNWGLGETPROCADDRESSPROC_PRIVATE)(const char*);
static PFNWGLGETPROCADDRESSPROC_PRIVATE gladGetProcAddressPtr;

static int open_libgl(void) {
    libGL = LoadLibraryW(L"opengl32.dll");
    if(libGL != NULL) {
        void (* tmp)(void);
        tmp = (void(*)(void)) GetProcAddress(libGL, "wglGetProcAddress");
        gladGetProcAddressPtr = (PFNWGLGETPROCADDRESSPROC_PRIVATE) tmp;
        return gladGetProcAddressPtr != NULL;
    }

    return 0;
}

static void close_libgl(void) {
    if(libGL != NULL) {
        FreeLibrary((HMODULE) libGL);
        libGL = NULL;
    }
}

#endif

static void* get_proc(const char *namez) {
    void* result = NULL;
    if(libGL == NULL) return NULL;

#if !defined(__APPLE__) && !defined(__HAIKU__)
    if(gladGetProcAddressPtr != NULL) {
        result = gladGetProcAddressPtr(namez);
    }
#endif
    if(result == NULL) {
#if defined(_WIN32) || defined(__CYGWIN__)
        result = (void*)GetProcAddress((HMODULE) libGL, namez);
#else
        result = dlsym(libGL, namez);
#endif
    }

    return result;
}

int %%SHORTNAME%%Init() {
    int status = 0;

	if (open_libgl()) {
		status = %%SHORTNAME%%Init(&get_proc);
		close_libgl();
	}

	return status;
}

static void load_procs(GLADloadproc proc);

int %%SHORTNAME%%Init(GLADloadproc proc) {
	load_procs(proc);
	return 0;
}

%%SOURCE_PFN%%

void load_procs(GLADloadproc proc) {
%%LOADPROCS%%
}
}
