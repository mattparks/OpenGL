/*

${GENERATOR}

------------------------------------------------------------------------
${LICENSE}
*/

#include <${HEADER_FILE}>

#include <cassert>

namespace impl {
#if defined(__APPLE__) || defined(__APPLE_CC__)
#import <CoreFoundation/CoreFoundation.h>
#import <UIKit/UIDevice.h>
gl::ProcAddress getProcAddress(const char *name) {
#ifdef SYSTEM_DARWIN
	static auto library = dlopen("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", RTLD_LAZY);
#else
	static auto library = dlopen("libGL.so", RTLD_LAZY);
#endif

	assert(library != nullptr);

	auto symbol = dlsym(library, name);
	return reinterpret_cast<gl::ProcAddress>(symbol);
}
#elif defined(__ANDROID__)
gl::ProcAddress getProcAddress(const char *name) {
}
#endif
}

namespace ${NAMESPACE} {
GetProcAddress getProcAddress = nullptr;

void initialize(const GetProcAddress &resolver) {
	if (resolver == nullptr)
		getProcAddress = impl::getProcAddress;
	else
		getProcAddress = resolver;
}

${GL_COMMANDS_PFN}
}
